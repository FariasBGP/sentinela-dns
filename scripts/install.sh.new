#!/usr/bin/env bash
# Sentinela-DNS — install.sh
# Instala/atualiza Unbound + Exporters + Prometheus + Grafana (Debian 12/13).

set -euo pipefail

CLR_OK="\033[32m"; CLR_WARN="\033[33m"; CLR_ERR="\033[31m"; CLR_INFO="\033[36m"; CLR_RESET="\033[0m"
ok(){   echo -e "${CLR_OK}✔${CLR_RESET} $*"; }
warn(){ echo -e "${CLR_WARN}▲${CLR_RESET} $*"; }
err(){  echo -e "${CLR_ERR}✖${CLR_RESET} $*"; }
inf(){  echo -e "${CLR_INFO}ℹ${CLR_RESET} $*"; }
require_root(){ [[ $EUID -eq 0 ]] || { err "Execute como root (su -)."; exit 1; }; }

require_root
DEBIAN_FRONTEND=noninteractive; export DEBIAN_FRONTEND

UNBOUND_EXPORTER_VERSION="${UNBOUND_EXPORTER_VERSION:-0.4.6}"
PROM_URL="${PROM_URL:-http://localhost:9090}"
GRAFANA_INSTALL="${GRAFANA_INSTALL:-yes}"
PROM_INSTALL="${PROM_INSTALL:-yes}"
NODE_EXPORTER_INSTALL="${NODE_EXPORTER_INSTALL:-yes}"

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"

# SO e libssl
. /etc/os-release || true
case "${VERSION_ID%%.*}" in 12|13) ok "Debian ${VERSION_ID} detectado."; ;; *) warn "SO não testado (${PRETTY_NAME:-?})."; ;; esac
LIBSSL_PKG="libssl3"; [[ "${VERSION_ID%%.*}" == "13" ]] && LIBSSL_PKG="libssl3t64"

# Pacotes base
inf "Atualizando e instalando pacotes..."
apt-get update -y && apt-get dist-upgrade -y || true
apt-get install -y curl wget jq tar ca-certificates gnupg lsb-release apt-transport-https dnsutils iproute2 netcat-openbsd apparmor-utils "${LIBSSL_PKG}" unbound unbound-anchor

# Desabilita AppArmor unbound
inf "Desabilitando AppArmor unbound..."
aa-disable /etc/apparmor.d/usr.sbin.unbound || true

# Unbound configs modulares
inf "Configurando Unbound..."
install -d -m 0755 /etc/unbound/unbound.conf.d
rm -f /etc/unbound/unbound.conf.d/root-auto-trust-anchor-file.conf

cat >/etc/unbound/unbound.conf <<'EOF'
server: verbosity: 1
include: "/etc/unbound/unbound.conf.d/*.conf"
EOF

cat >/etc/unbound/unbound.conf.d/31-statisticas.conf <<'EOF'
server: statistics-interval: 0; extended-statistics: yes; statistics-cumulative: yes
EOF

cat >/etc/unbound/unbound.conf.d/41-protocols.conf <<'EOF'
server: do-ip4: yes; do-ip6: yes; do-udp: yes; do-tcp: yes
EOF

cat >/etc/unbound/unbound.conf.d/51-acls-locals.conf <<'EOF'
server: access-control: 127.0.0.1/32 allow; access-control: ::1/128 allow; access-control: 10.0.0.0/8 allow; access-control: 100.64.0.0/10 allow; access-control: 172.16.0.0/12 allow
EOF

cat >/etc/unbound/unbound.conf.d/52-acls-trusteds.conf <<'EOF'
server: # Coloque aqui faixas adicionais de clientes confiáveis
EOF

cat >/etc/unbound/unbound.conf.d/59-acls-default-policy.conf <<'EOF'
server: access-control: 0.0.0.0/0 deny; access-control: ::/0 deny
EOF

cat >/etc/unbound/unbound.conf.d/61-configs.conf <<'EOF'
server: outgoing-range: 8192; outgoing-port-avoid: 0-1024; outgoing-port-permit: 1025-65535; num-threads: 32; num-queries-per-thread: 2048; msg-cache-size: 64m; msg-cache-slabs: 32; rrset-cache-size: 128m; rrset-cache-slabs: 32; infra-host-ttl: 60; infra-lame-ttl: 120; infra-cache-numhosts: 10000; infra-cache-lame-size: 10k; infra-cache-slabs: 32; key-cache-slabs: 32; rrset-roundrobin: yes; hide-identity: yes; hide-version: yes; harden-glue: yes; harden-algo-downgrade: yes; harden-below-nxdomain: yes; harden-dnssec-stripped: yes; harden-large-queries: yes; harden-referral-path: no; harden-short-bufsize: yes; do-not-query-address: 127.0.0.1/8; do-not-query-localhost: yes; edns-buffer-size: 1472; aggressive-nsec: yes; delay-close: 10000; neg-cache-size: 8M; qname-minimisation: yes; deny-any: yes; ratelimit: 2000; unwanted-reply-threshold: 10000; use-caps-for-id: yes; val-clean-additional: yes; minimal-responses: yes; prefetch: yes; prefetch-key: yes; serve-expired: yes; so-reuseport: yes
EOF

cat >/etc/unbound/unbound.conf.d/63-listen-interfaces.conf <<'EOF'
server: interface: 0.0.0.0; interface: ::0; port: 53; do-udp: yes; do-tcp: yes
EOF

cat >/etc/unbound/unbound.conf.d/89-hyperlocal-cache.conf <<'EOF'
server: auth-zone: name: "."; master: 198.41.0.4; master: 2001:503:ba3e::2:30; master: 192.33.4.12; master: 2001:500:2::c; master: 199.7.91.13; master: 2001:500:2d::d; master: 192.203.230.10; master: 2001:500:a8::e; master: 192.5.5.241; master: 2001:500:2f::f; master: 192.112.36.4; master: 2001:500:12::d0d; master: 192.36.148.17; master: 2001:7fe::53; master: 192.58.128.30; master: 2001:503:c27::2:30; master: 193.0.14.129; master: 2001:7fd::1; master: 199.7.83.42; master: 2001:500:9f::42; master: 202.12.27.33; master: 2001:dc3::35; fallback-enabled: yes; for-downstream: no; for-upstream: yes; zonefile: ""
EOF

cat >/etc/unbound/unbound.conf.d/99-remote-control.conf <<'EOF'
server: chroot: ""; directory: "/etc/unbound"; pidfile: "/var/run/unbound.pid"; username: "unbound"
remote-control: control-enable: yes; control-interface: 127.0.0.1; control-port: 8953; control-use-cert: yes; server-key-file: "/etc/unbound/unbound_server.key"; server-cert-file: "/etc/unbound/unbound_server.pem"; control-key-file: "/etc/unbound/unbound_control.key"; control-cert-file: "/etc/unbound/unbound_control.pem"
EOF

chown -R unbound:unbound /etc/unbound /var/lib/unbound
chmod -R 755 /etc/unbound
chmod 600 /etc/unbound/unbound_{server,control}.key 2>/dev/null || true
chmod 644 /etc/unbound/unbound_{server,control}.pem 2>/dev/null || true
chmod 644 /var/lib/unbound/root.key 2>/dev/null || true

if ! unbound-checkconf >/dev/null 2>&1; then err "Config Unbound inválida!"; unbound-checkconf; exit 1; fi
ok "Config Unbound OK."

if [[ ! -f /etc/unbound/unbound_server.key || ! -f /etc/unbound/unbound_control.key ]]; then
  inf "Gerando certs unbound-control..."
  unbound-control-setup -d /etc/unbound/ || { err "Falha unbound-control-setup."; exit 1; }
  chown unbound:unbound /etc/unbound/unbound_{server,control}.{key,pem}
  chmod 600 /etc/unbound/unbound_{server,control}.key
  chmod 644 /etc/unbound/unbound_{server,control}.pem
fi

install -d -m 0755 /etc/systemd/system/unbound.service.d
cat >/etc/systemd/system/unbound.service.d/override.conf <<'EOF'
[Service]
ExecStartPre=
Environment="DAEMON_OPTS="
ExecStart=
ExecStart=/usr/sbin/unbound -d $DAEMON_OPTS
EOF

systemctl daemon-reload
systemctl enable unbound
sleep 2
systemctl restart unbound
sleep 2
systemctl is-active --quiet unbound || { err "Unbound falhou."; exit 1; }
ok "Unbound ativo :53."

# unbound_exporter
inf "Instal unbound_exporter v${UNBOUND_EXPORTER_VERSION}..."
tmpdir="$(mktemp -d)"; pushd "$tmpdir" >/dev/null
ok_dl=0
for URL in "https://github.com/letsencrypt/unbound_exporter/releases/download/v${UNBOUND_EXPORTER_VERSION}/unbound_exporter-${UNBOUND_EXPORTER_VERSION}.linux-amd64.tar.gz" "https://github.com/kumina/unbound_exporter/releases/download/v${UNBOUND_EXPORTER_VERSION}/unbound_exporter-${UNBOUND_EXPORTER_VERSION}.linux-amd64.tar.gz"; do
  if curl -fsSL -o ue.tar.gz "$URL" && tar -tzf ue.tar.gz >/dev/null 2>&1; then
    tar -xzf ue.tar.gz
    BIN="$(find . -type f -name unbound_exporter -perm -u+x | head -n1)"
    [[ -n "$BIN" ]] && install -m0755 "$BIN" /usr/local/bin/unbound_exporter && ok_dl=1 && break
  fi
done
if [[ "$ok_dl" -ne 1 ]]; then
  inf "Compilando do source..."
  apt-get install -y golang
  GO111MODULE=on GOBIN=/usr/local/bin go install "github.com/letsencrypt/unbound_exporter@v${UNBOUND_EXPORTER_VERSION}"
fi
popd >/dev/null

cat > /etc/systemd/system/unbound_exporter.service <<'EOF'
[Unit]
Description=Prometheus Unbound Exporter
After=network-online.target unbound.service
Requires=unbound.service

[Service]
User=unbound
Group=unbound
ExecStart=/usr/local/bin/unbound_exporter --unbound.host=tcp://127.0.0.1:8953 --unbound.cert=/etc/unbound/unbound_control.pem --unbound.key=/etc/unbound/unbound_control.key --web.listen-address=:9167 --web.telemetry-path=/metrics
Restart=on-failure
NoNewPrivileges=true
PrivateTmp=true
ProtectSystem=full
ProtectHome=true

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload
systemctl enable --now unbound_exporter
systemctl restart unbound_exporter
sleep 2
systemctl is-active --quiet unbound_exporter || { err "unbound_exporter falhou."; journalctl -u unbound_exporter -n 20; exit 1; }
ok "unbound_exporter ativo :9167."

# node_exporter
if [[ "$NODE_EXPORTER_INSTALL" == "yes" ]]; then
  apt-get install -y prometheus-node-exporter
  systemctl enable --now prometheus-node-exporter
  ok "node_exporter ativo :9100."
fi

# Prometheus
if [[ "$PROM_INSTALL" == "yes" ]]; then
  apt-get install -y prometheus
  PROM_FILE="/etc/prometheus/prometheus.yml"
  cp -a "$PROM_FILE" "${PROM_FILE}.bak.$(date +%F-%H%M%S)" 2>/dev/null || true
  cat > "$PROM_FILE" <<'EOF'
global: scrape_interval: 15s; evaluation_interval: 15s
scrape_configs:
  - job_name: 'prometheus' static_configs: - targets: ['localhost:9090']
  - job_name: 'unbound' static_configs: - targets: ['localhost:9167']
  - job_name: 'node' static_configs: - targets: ['localhost:9100']
EOF
  promtool check config "$PROM_FILE" 2>/dev/null || warn "promtool falhou."
  systemctl enable --now prometheus
  systemctl restart prometheus
  ok "Prometheus ativo :9090."
fi

# Grafana
if [[ "$GRAFANA_INSTALL" == "yes" ]]; then
  if [[ ! -f /etc/apt/sources.list.d/grafana.list ]]; then
    mkdir -p /etc/apt/keyrings
    curl -fsSL https://packages.grafana.com/gpg.key | gpg --dearmor -o /etc/apt/keyrings/grafana.gpg
    echo "deb [signed-by=/etc/apt/keyrings/grafana.gpg] https://packages.grafana.com/oss/deb stable main" > /etc/apt/sources.list.d/grafana.list
    apt-get update -y
  fi
  apt-get install -y grafana

  if ss -tuln | grep -q ':3000 '; then inf "Porta 3000 ocupada; matando..."; fuser -k 3000/tcp || true; fi

  install -d /etc/grafana/provisioning/datasources
  rm -f /etc/grafana/provisioning/datasources/sample.yaml
  cat > /etc/grafana/provisioning/datasources/prometheus.yaml <<EOF
apiVersion: 1
datasources:
- name: Prometheus
  type: prometheus
  url: ${PROM_URL}
  access: proxy
  isDefault: true
EOF

  install -d /etc/grafana/provisioning/dashboards /var/lib/grafana/dashboards/unbound
  cat > /etc/grafana/provisioning/dashboards/sentinela-unbound.yaml <<'EOF'
apiVersion: 1
providers:
  - name: 'Sentinela-DNS'
    folder: 'DNS/Unbound'
    type: file
    disableDeletion: false
    allowUiUpdates: true
    options:
      path: /var/lib/grafana/dashboards/unbound
EOF

  if [[ -f "${REPO_ROOT}/grafana/provisioning/dashboards/sentinela-unbound-main.json" ]]; then
    cp -f "${REPO_ROOT}/grafana/provisioning/dashboards/sentinela-unbound-main.json" /var/lib/grafana/dashboards/unbound/
  else
    cat > /var/lib/grafana/dashboards/unbound/sentinela-unbound-main.json <<'EOF'
{ "title": "Sentinela-DNS · Unbound (Main)", "schemaVersion": 36, "version": 1, "panels": [] }
EOF
  fi

  chown -R grafana:grafana /etc/grafana /var/lib/grafana /var/log/grafana
  chmod -R 755 /etc/grafana /var/lib/grafana /var/log/grafana

  systemctl daemon-reload
  systemctl enable --now grafana-server
  systemctl restart grafana-server
  sleep 5
  systemctl is-active --quiet grafana-server || { err "Grafana falhou."; exit 1; }
  ok "Grafana ativo :3000."
fi

# Health final
for s in unbound unbound_exporter prometheus grafana-server prometheus-node-exporter; do
  systemctl is-active --quiet "$s" && ok "Serviço ativo: $s" || warn "Serviço INATIVO: $s"
done

ok "Instalação concluída."
echo "Prometheus: ${PROM_URL}"
echo "Grafana: http://SEU_IP:3000 (admin/admin → altere senha)"
echo "Exporters: node :9100 | unbound :9167"
